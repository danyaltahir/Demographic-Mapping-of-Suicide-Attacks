# -*- coding: utf-8 -*-
"""
/***************************************************************************
 demographicmap
                                 A QGIS plugin
 shows no of bomb blasts
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2018-06-11
        git sha              : $Format:%H$
        copyright            : (C) 2018 by abc
        email                : abcdef@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from PyQt5.QtCore import *
from PyQt5.QtGui import *
from PyQt5.QtWidgets import *
import pandas as pd
from osgeo import ogr
from qgis.core import *
#from qgis.utils import *
from qgis.gui import *

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .demographic_map_dialog import demographicmapDialog
import os.path


class demographicmap:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'demographicmap_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)

            if qVersion() > '4.3.3':
                QCoreApplication.installTranslator(self.translator)

        # Create the dialog (after translation) and keep reference
        self.dlg = demographicmapDialog()

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&demographicmap')
        # TODO: We are going to let the user set this up in a future iteration
        self.toolbar = self.iface.addToolBar(u'demographicmap')
        self.toolbar.setObjectName(u'demographicmap')

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('demographicmap', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            self.toolbar.addAction(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/demographic_map/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u''),
            callback=self.run,
            parent=self.iface.mainWindow())


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&demographicmap'),
                action)
            self.iface.removeToolBarIcon(action)
        # remove the toolbar
        del self.toolbar


    def run(self):
        """Run method that performs all the real work"""
        # show the dialog
        self.dlg.show()
        dt=["Pakistan"]
        self.dlg.comboBox.addItems(dt)
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            keyindex=self.dlg.comboBox.currentIndex()
            key=dt[keyindex]
            
            lat=[33.718, 24.9918, 24.9918, 24.9918, 30.2095, 33.6058, 33.6058, 24.9918, 24.9918, 32.9746, 33.5833, 33.7645, 32.4972, 31.5451, 30.2095, 35.2227, 33.718, 24.9918, 33.5351, 24.9918, 24.9918, 32.9861, 32.9746, 25.8377, 34.503, 34.0043, 32.9861, 32.9746, 33.718, 34.0043, 31.8238, 32.6018, 31.8238, 33.718, 30.2095, 32.5737, 34.1509, 34.0043, 32.226, 32.9746, 35.2227, 32.9746, 32.9746, 31.8238, 35.2227, 33.718, 32.9746, 25.8377, 33.5351, 33.5833, 32.9746, 33.718, 35.2227, 32.9746, 32.226, 32.9746, 32.9861, 33.5351, 32.9746, 34.8015, 34.8718, 32.3202, 33.6058, 33.6058, 31.8238, 34.0011, 32.226, 32.9861, 24.9918, 35.2227, 33.6058, 32.0791, 34.0043, 33.6058, 33.6058, 34.0043, 35.2227, 33.7645, 30.2095, 34.0322, 33.5833, 34.1509, 35.2227, 33.6058, 35.2227, 31.5451, 32.9746, 34.0043, 32.9746, 33.6058, 30.2095, 34.1509, 32.9746, 35.2227, 35.2227, 33.6058, 32.935, 34.8718, 33.6854, 31.5451, 31.5451, 31.5451, 35.2227, 32.3202, 34.0211, 32.935, 35.2227, 34.1982, 33.718, 33.718, 31.8238, 31.5451, 31.8238, 33.6058, 35.2227, 33.5833, 34.0043, 35.2227, 32.9746, 33.718, 35.2227, 30.2095, 34.0043, 31.6216, 33.718, 34.0211, 32.9746, 35.2227, 32.9746, 32.9861, 34.1982, 32.3202, 33.5351, 35.2227, 34.8718, 34.0043, 34.1509, 35.2227, 34.8718, 34.3943, 35.2227, 34.1509, 32.9746, 34.3943, 34.3943, 31.8238, 32.9861, 35.3833, 30.05, 35.3833, 34.0211, 32.9861, 31.8238, 32.9861, 32.9861, 30.5833, 34.0043, 33.6058, 33.718, 32.226, 34.0211, 32.9746, 33.718, 32.9746, 32.9303, 34.1509, 33.5351, 34.0043, 33.6854, 32.226, 31.5451, 34.0043, 31.8238, 35.1977, 33.718, 34.0043, 34.0043, 31.5451, 34.0322, 35.3833, 34.3597, 34.0211, 34.0043, 33.6058, 34.0043, 32.9746, 32.3202, 35.2227, 35.2227, 32.9746, 33.5833, 35.2227, 34.0043, 34.0211, 35.2227, 33.5351, 34.503, 33.5833, 33.6854, 34.2, 32.9861, 34.0043, 32.935, 33.718, 34.0043, 34.8015, 33.5833, 31.5451, 34.0043, 33.718, 33.7645, 32.9303, 33.6058, 31.5451, 34.0043, 34.0043, 34.1509, 34.0043, 32.9861, 34.0043, 34.0043, 34.0043, 35.2227, 33.718, 33.6058, 34.0043, 31.5451, 30.1886, 30.05, 32.9861, 34.8453, 34.0043, 34.0043, 33.718, 34.3597, 32.6018, 33.705999999999996, 34.0211, 34.0043, 33.8243, 32.226, 34.8718, 34.0211, 32.9861, 34.0211, 34.3333, 35.2227, 33.1193, 33.5351, 31.5451, 31.5451, 35.2227, 32.226, 34.8718, 34.0043, 34.8453, 30.2095, 33.5833, 33.5833, 34.0043, 34.0043, 35.2227, 34.8718, 31.5451, 31.5451, 32.9746, 33.5833, 32.0791, 34.0322, 34.0043, 32.3202, 31.5451, 30.2095, 34.1982, 32.6018, 30.2095, 24.9918, 32.6018, 34.1335, 33.6854, 24.9918, 33.8243, 32.3202, 32.935, 32.9746, 30.2095, 33.5833, 33.5351, 33.718, 34.0043, 34.8718, 34.3597, 32.935, 31.5451, 34.8718, 34.0043, 34.1982, 32.9746, 34.503, 32.935, 24.9918, 33.5351, 34.0043, 33.5351, 34.1335, 34.1509, 33.6854, 30.05, 34.8453, 30.2095, 34.8718, 34.1509, 30.05, 34.0043, 33.5351, 34.8718, 34.0322, 34.0043, 33.718, 31.8238, 34.0043, 32.3202, 32.3202, 32.9746, 34.0043, 34.0211, 30.2095, 32.6018, 30.2095, 34.8453, 24.9918, 34.0322, 34.1335, 24.9918, 24.9918, 32.935, 32.5737, 34.0043, 34.0211, 31.8238, 34.0043, 32.9746, 35.1977, 34.0043, 34.0043, 31.8238, 34.0043, 34.0043, 34.0211, 24.9918, 34.8718, 34.0043, 30.2095, 32.935, 34.0043, 32.9746, 33.6854, 34.3943, 34.0043, 24.9918, 32.9746, 24.9918, 33.6058, 31.8238, 32.3202, 34.0043, 32.3202, 34.0043, 30.2095, 33.5351, 33.5351, 32.935, 30.2095, 34.0043, 34.0043, 32.9746, 34.0043, 34.0043, 32.9746, 34.8718, 30.2095, 34.0043, 28.0, 33.5351, 32.935, 24.9918, 30.2095, 34.0043, 32.9746, 30.2095, 30.2095, 34.1982, 34.0043, 30.2095, 33.5351, 27.6833, 32.9746, 30.2095, 34.0043, 30.9222, 33.5351, 32.3202, 31.8238, 32.935, 32.9746, 34.0211, 33.6058, 32.9746, 24.9918, 30.2095, 33.5351, 24.9918, 33.6058, 34.0043, 24.9918, 34.0043, 30.2999, 34.0043, 24.9918, 34.0043, 33.718, 34.0043, 24.9918, 34.0043, 33.5689, 28.28, 24.9918, 34.0043, 32.9746, 34.0043, 30.2095, 33.8679, 30.2095, 31.6047, 34.0043, 31.35, 28.0, 34.0043, 31.5451, 33.6, 31.5451, 24.9918, 32.9746, 24.9918, 24.9918, 31.5451, 32.0836]
            lon=[73.0718, 66.9911, 66.9911, 66.9911, 67.0182, 73.0437, 73.0437, 66.9911, 66.9911, 70.1456, 71.4333, 72.3667, 74.5361, 74.3407, 67.0182, 72.4258, 73.0718, 66.9911, 71.0713, 66.9911, 66.9911, 70.6042, 70.1456, 66.5224, 71.9046, 71.5448, 70.6042, 70.1456, 73.0718, 71.5448, 70.9095, 70.9148, 70.9095, 73.0718, 67.0182, 74.0786, 71.7359, 71.5448, 70.3761, 70.1456, 72.4258, 70.1456, 70.1456, 70.9095, 72.4258, 73.0718, 70.1456, 66.5224, 71.0713, 71.4333, 70.1456, 73.0718, 72.4258, 70.1456, 70.3761, 70.1456, 70.6042, 71.0713, 70.1456, 72.757, 71.5249, 69.8597, 73.0437, 73.0437, 70.9095, 72.9372, 70.3761, 70.6042, 66.9911, 72.4258, 73.0437, 72.6718, 71.5448, 73.0437, 73.0437, 71.5448, 72.4258, 72.3667, 67.0182, 73.0944, 71.4333, 71.7359, 72.4258, 73.0437, 72.4258, 74.3407, 70.1456, 71.5448, 70.1456, 73.0437, 67.0182, 71.7359, 70.1456, 72.4258, 72.4258, 73.0437, 70.6688, 71.5249, 71.5131, 74.3407, 74.3407, 74.3407, 72.4258, 69.8597, 71.2874, 70.6688, 72.4258, 72.0444, 73.0718, 73.0718, 70.9095, 74.3407, 70.9095, 73.0437, 72.4258, 71.4333, 71.5448, 72.4258, 70.1456, 73.0718, 72.4258, 67.0182, 71.5448, 71.065, 73.0718, 71.2874, 70.1456, 72.4258, 70.1456, 70.6042, 72.0444, 69.8597, 71.0713, 72.4258, 71.5249, 71.5448, 71.7359, 72.4258, 71.5249, 72.6151, 72.4258, 71.7359, 70.1456, 72.6151, 72.6151, 70.9095, 70.6042, 72.1833, 70.6333, 72.1833, 71.2874, 70.6042, 70.9095, 70.6042, 70.6042, 67.0, 71.5448, 73.0437, 73.0718, 70.3761, 71.2874, 70.1456, 73.0718, 70.1456, 72.8556, 71.7359, 71.0713, 71.5448, 71.5131, 70.3761, 74.3407, 71.5448, 70.9095, 71.8749, 73.0718, 71.5448, 71.5448, 74.3407, 73.0944, 72.1833, 73.4711, 71.2874, 71.5448, 73.0437, 71.5448, 70.1456, 69.8597, 72.4258, 72.4258, 70.1456, 71.4333, 72.4258, 71.5448, 71.2874, 72.4258, 71.0713, 71.9046, 71.4333, 71.5131, 72.5, 70.6042, 71.5448, 70.6688, 73.0718, 71.5448, 72.757, 71.4333, 74.3407, 71.5448, 73.0718, 72.3667, 72.8556, 73.0437, 74.3407, 71.5448, 71.5448, 71.7359, 71.5448, 70.6042, 71.5448, 71.5448, 71.5448, 72.4258, 73.0718, 73.0437, 71.5448, 74.3407, 71.4559, 70.6333, 70.6042, 71.9046, 71.5448, 71.5448, 73.0718, 73.4711, 70.9148, 73.7242, 71.2874, 71.5448, 73.7949, 70.3761, 71.5249, 71.2874, 70.6042, 71.2874, 73.2, 72.4258, 71.0951, 71.0713, 74.3407, 74.3407, 72.4258, 70.3761, 71.5249, 71.5448, 71.9046, 67.0182, 71.4333, 71.4333, 71.5448, 71.5448, 72.4258, 71.5249, 74.3407, 74.3407, 70.1456, 71.4333, 72.6718, 73.0944, 71.5448, 69.8597, 74.3407, 67.0182, 72.0444, 70.9148, 67.0182, 66.9911, 70.9148, 72.4702, 71.5131, 66.9911, 73.7949, 69.8597, 70.6688, 70.1456, 67.0182, 71.4333, 71.0713, 73.0718, 71.5448, 71.5249, 73.4711, 70.6688, 74.3407, 71.5249, 71.5448, 72.0444, 70.1456, 71.9046, 70.6688, 66.9911, 71.0713, 71.5448, 71.0713, 72.4702, 71.7359, 71.5131, 70.6333, 71.9046, 67.0182, 71.5249, 71.7359, 70.6333, 71.5448, 71.0713, 71.5249, 73.0944, 71.5448, 73.0718, 70.9095, 71.5448, 69.8597, 69.8597, 70.1456, 71.5448, 71.2874, 67.0182, 70.9148, 67.0182, 71.9046, 66.9911, 73.0944, 72.4702, 66.9911, 66.9911, 70.6688, 74.0786, 71.5448, 71.2874, 70.9095, 71.5448, 70.1456, 71.8749, 71.5448, 71.5448, 70.9095, 71.5448, 71.5448, 71.2874, 66.9911, 71.5249, 71.5448, 67.0182, 70.6688, 71.5448, 70.1456, 71.5131, 72.6151, 71.5448, 66.9911, 70.1456, 66.9911, 73.0437, 70.9095, 69.8597, 71.5448, 69.8597, 71.5448, 67.0182, 71.0713, 71.0713, 70.6688, 67.0182, 71.5448, 71.5448, 70.1456, 71.5448, 71.5448, 70.1456, 71.5249, 67.0182, 71.5448, 68.6667, 71.0713, 70.6688, 66.9911, 67.0182, 71.5448, 70.1456, 67.0182, 67.0182, 72.0444, 71.5448, 67.0182, 71.0713, 68.8667, 70.1456, 67.0182, 71.5448, 66.4447, 71.0713, 69.8597, 70.9095, 70.6688, 70.1456, 71.2874, 73.0437, 70.1456, 66.9911, 67.0182, 71.0713, 66.9911, 73.0437, 71.5448, 66.9911, 71.5448, 71.9308, 71.5448, 66.9911, 71.5448, 73.0718, 71.5448, 66.9911, 71.5448, 72.6378, 62.35, 66.9911, 71.5448, 70.1456, 71.5448, 67.0182, 70.51364000000001, 67.0182, 74.5729, 71.5448, 69.45, 68.6667, 71.5448, 74.3407, 73.0333, 74.3407, 66.9911, 70.1456, 66.9911, 66.9911, 74.3407, 72.6711]
            
            

            multipoint= ogr.Geometry(ogr.wkbMultiPoint)
            for i in range (len(lat)):
                x=lat[i]
                y=lon[i]
                point= ogr.Geometry(ogr.wkbPoint)
                
                point.AddPoint(y,x)
                multipoint.AddGeometry(point)
            wkt=multipoint.ExportToWkt()    
            temp=QgsVectorLayer("MULTIPOINT?crs=epsg:4326","cities","memory")
            QgsProject.instance().addMapLayer(temp)
            temp.startEditing()
            geom=QgsGeometry()
            geom=QgsGeometry.fromWkt(wkt)
            feat=QgsFeature()
            feat.setGeometry(geom)
            temp.dataProvider().addFeatures([feat])
            temp.commitChanges()
            
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            pass
